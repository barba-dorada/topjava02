<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">


    <!--<bean class="ru.javawebinar.topjava.util.DbPopulator">
        <constructor-arg name="scriptLocation" value="classpath:db/populateDB.sql"/>
    </bean>-->


    <!--    <jdbc:initialize-database data-source="dataSource" enabled="${database.init}">
            <jdbc:script location="classpath:db/${jdbc.initLocation}"/>
            <jdbc:script location="classpath:db/populateDB.sql"/>
        </jdbc:initialize-database>-->

    <bean class="ru.javawebinar.topjava.util.DbPopulator">
        <constructor-arg name="scriptLocation" value="classpath:db/populateDB.sql"/>
    </bean>

    <!--<context:component-scan base-package="ru.javawebinar.**.repository.jpa"/>-->
    <!--
        <context:component-scan base-package="ru.javawebinar.**.repository.datajpa"/>
        <jpa:repositories base-package="ru.javawebinar.**.repository.datajpa"/>-->

    <context:property-placeholder location="classpath:db/postgres.properties" system-properties-mode="OVERRIDE"/>








    <!--no pooling-->
    <beans profile="hsqldb">
        <context:property-placeholder location="classpath:db/hsqldb.properties" system-properties-mode="OVERRIDE"/>

        <bean id="dataSource"
              class="org.springframework.jdbc.datasource.DriverManagerDataSource"
              p:driverClassName="${database.driverClassName}"
              p:url="${database.url}"
              p:username="${database.username}"
              p:password="${database.password}"/>
    </beans>

    <beans profile="jpa">
        <context:component-scan  base-package="ru.javawebinar.**.repository.jpa"/>
        <jpa:repositories base-package="ru.javawebinar.**.repository.jpa"/>
    </beans>


    <beans profile="jpadata">
        <context:component-scan  base-package="ru.javawebinar.**.repository.jpadata"/>
        <jpa:repositories base-package="ru.javawebinar.**.repository.jpadata"/>
    </beans>


    <beans profile="postgres">
        <!--<context:property-placeholder location="classpath:db/postgres.properties" system-properties-mode="OVERRIDE"/>-->

        <bean id="dataSource"
              class="org.apache.tomcat.jdbc.pool.DataSource"
              p:driverClassName="${database.driverClassName}"
              p:url="${database.url}"
              p:username="${database.username}"
              p:password="${database.password}"/>
    </beans>

    <beans profile="hhh">
        <context:property-placeholder location="classpath:db/postgres.properties" system-properties-mode="OVERRIDE"/>
        <!--no pooling-->
        <bean id="dataSource"
              class="org.springframework.jdbc.datasource.DriverManagerDataSource">
            <property name="driverClassName" value="${database.driverClassName}"/>
            <property name="url" value="${database.url}"/>
            <property name="username" value="${database.username}"/>
            <property name="password" value="${database.password}"/>
        </bean>
    </beans>


    <beans profile="jdbc">
        <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
            <constructor-arg ref="dataSource"/>
        </bean>

        <bean id="namedJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
            <constructor-arg ref="dataSource"/>
        </bean>
    </beans>







    <beans profile="jpa,jpadata">
        <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
              p:dataSource-ref="dataSource"
              p:packagesToScan="ru.javawebinar.topjava.**.model" >

            <!--p:persistenceUnitName="persistenceUnit">-->

            <property name="jpaPropertyMap">

                <map>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).FORMAT_SQL}" value="${hibernate.format_sql}"/>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SQL_COMMENTS}"
                           value="${hibernate.use_sql_comments}"/>
                    <entry key="javax.persistence.schema-generation.scripts.action" value="drop-and-create"/>
                    <entry key="javax.persistence.schema-generation.scripts.create-target" value="c:/dev/sampleCreate.ddl"/>
                    <entry key="javax.persistence.schema-generation.scripts.drop-target" value="c:/dev/sampleDrop.ddl"/>
                   <!-- <entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_AUTO}" value="${hibernate.hbm2ddl.auto}"/>-->
                </map>
            </property>

            <property name="jpaVendorAdapter">
                <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" p:showSql="${jpa.showSql}">
                </bean>
            </property>
        </bean>

        <tx:annotation-driven/>

        <!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
        <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
              p:entityManagerFactory-ref="entityManagerFactory"/>
    </beans>


</beans>